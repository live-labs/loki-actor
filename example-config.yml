loki:
  host: "loki.example.com"
  port: 3100

# Configuration is organized in a hierarchical structure:
# - Root level contains Loki connection settings and flows array
# - Each flow contains a query and array of triggers
# - Each trigger has an action or, in case of multiline trigger - two actions (one for first line and one for subsequent lines)

flows:
  - name: 'Example flow'
    # LogQL query defines the log stream source
    # Adjust the query according to your log labels and requirements
    query: '{compose_project="example", container_name =~ "example.*"}'
    triggers:
      - name: 'error'
        # Pattern to match in the log message portion
        regex: 'ERR|ERROR'

        # Optional exclusion pattern to prevent matching on specific messages
        ignore_regex: 'set to ERROR'
        # Action defines what happens when trigger conditions are met
        # Supports variable substitution using ${labels.*} and ${values.*}
        # Available values:
        # - ${labels.*}: Any label from your Loki logs
        # - ${values.ts}: Timestamp
        # - ${values.message}: Log message content
        action:
          type: 'cmd'
          cmd_run: [ 'echo', '!!!!!', 'error', '${labels.host}', '${labels.container_name}', '${values.message}' ]
      - name: 'warn'
        regex: 'WARN'
        action:
          type: 'slack'
          slack_webhook_url: 'https://hooks.slack.com/services/TXXXXXXXXXX/BXXXXXXXXXX/JXXXXXXXXXXXXXXXXXXXXXXX'
          # Slack message can be customized using the same variable substitution
          slack_message_template: |
            *Warning in ${labels.container_name} on ${labels.host}*
            ```
            ${values.message}
            ```
          slack_timeout_sec: 5
      - name: 'java exception'
        regex: 'Exception\:'
        ignore_regex: 'Caused by\:'
        # Number of subsequent lines to capture after the matching line
        lines: 30
        action:
          type: 'cmd'
          cmd_run: [ 'echo', '!!!!!', 'exception', '${labels.host}', '${labels.container_name}', '${values.message}' ]
        # Separate action for processing additional captured lines
        next_lines_action:
          type: 'cmd'
          cmd_run: [ 'echo', '${values.message}' ]